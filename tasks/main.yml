---
# tasks file for zabbix
- name: load default variables
  include_vars:
    file: default.yml

- name: load os-specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_distribution }}.yml"
    - default.yml

- name: install zabbix repository (dnf/yum)
  package:
    name: "{{ zabbix_repository }}"
  register: result
  retries: 3
  until: result is succeeded
  when:
    - ansible_pkg_mgr == "dnf" or ansible_pkg_mgr == "yum"

- name: get zabbix repository (apt)
  get_url:
    url: "{{ zabbix_repository }}"
    dest: /tmp
  register: result
  retries: 3
  until: result is succeeded
  when:
    - ansible_pkg_mgr == "apt"

- name: install zabbix repository (apt)
  apt:
    deb: "/tmp/{{ zabbix_repository | basename }}"
  register: result
  retries: 3
  until: result is succeeded
  when:
    - ansible_pkg_mgr == "apt"
  notify:
    - update cache (apt)

- name: flush handlers
  meta: flush_handlers

- name: create /etc/zabbix
  file:
    path: /etc/zabbix
    state: directory

- name: install zabbix-agent software
  package:
    name: zabbix-agent
    state: "{{ zabbix_agent | default('present') }}"
  register: result
  retries: 3
  until: result is succeeded
  when:
    - zabbix_agent is defined

- name: configuring zabbix agent
  template:
    src: zabbix_agentd.conf.j2
    dest: /etc/zabbix/zabbix_agentd.conf
  notify:
    - restart zabbix agent
  when:
    - zabbix_agent == "present"

- name: start and enable zabbix agent
  service:
    name: "{{ zabbix_agent_service }}"
    state: started
    enabled: yes
  when:
    - ansible_virtualization_type != "docker"
    - zabbix_agent == "present"

- name: install zabbix-get software
  package:
    name: zabbix-get
    state: "{{ zabbix_get | default('absent') }}"
  register: result
  retries: 3
  until: result is succeeded
  when:
    - zabbix_get is defined

- name: install zabbix-java-gateway software
  package:
    name: zabbix-java-gateway
    state: "{{ zabbix_java_gateway | default('absent') }}"
  register: result
  retries: 3
  until: result is succeeded
  when:
    - zabbix_java_gateway is defined

- name: start and enable zabbix-java-gateway
  service:
    name: "{{ zabbix_java_gateway_service }}"
    state: started
    enabled: yes
  when:
    - ansible_virtualization_type != "docker"
    - zabbix_java_gateway == "present"

- name: install zabbix-server requirements
  package:
    name: "{{ item }}"
  register: result
  retries: 3
  until: result is succeeded
  when:
    - zabbix_server == "present"
  with_items:
    - "{{ zabbix_server_requirements }}"

- name: install zabbix-server software
  package:
    name: "zabbix-server-{{ zabbix_server_type | default('mysql') }}"
    state: "{{ zabbix_server | default('absent') }}"
  register: result
  retries: 3
  until: result is succeeded
  when:
    - zabbix_server is defined

- name: unarchive zabbix schema
  command: gunzip /usr/share/doc/zabbix-server-{{ zabbix_server_type}}-{{ zabbix_version_major }}.{{ zabbix_version_minor }}/create.sql.gz
  args:
    creates: /usr/share/doc/zabbix-server-{{ zabbix_server_type}}-{{ zabbix_version_major }}.{{ zabbix_version_minor }}/create.sql
  notify:
    - import zabbix schema
  when:
    - zabbix_server == "present"

- name: selinux settings for zabbix_server
  seboolean:
    name: "{{ item }}"
    state: yes
    persistent: yes
  with_items:
    - httpd_can_connect_zabbix
    - httpd_can_network_connect_db
    - zabbix_can_network
  when:
    - ansible_selinux.status is defined
    - ansible_selinux.status == "enabled"
    - zabbix_server == "present"

- name: install required selinux software
  package:
    name: "{{ item }}"
  register: result
  retries: 3
  until: result is succeeded
  with_items:
    - checkpolicy
    - policycoreutils-python
    - policycoreutils
  when:
    - ansible_selinux.status is defined
    - ansible_selinux.status == "enabled"
    - zabbix_server == "present"

- name: place selinux type enforcement
  copy:
    src: my-zabbixserver.te
    dest: /etc/zabbix/my-zabbixserver.te
  notify:
    - create selinux mod
    - create selinux pp
    - load selinux pp
  when:
    - ansible_selinux.status is defined
    - ansible_selinux.status == "enabled"
    - zabbix_server == "present"

- name: flush handlers
  meta: flush_handlers

- name: configure zabbix server
  template:
    src: zabbix_server.conf.j2
    dest: /etc/zabbix/zabbix_server.conf
  notify:
    - restart zabbix server
  when:
    - zabbix_server == "present"

- name: start and enable zabbix-server
  service:
    name: "{{ zabbix_server_service }}"
    state: started
    enabled: yes
  when:
    - ansible_virtualization_type != "docker"
    - zabbix_server == "present"

- name: install zabbix-sender software
  package:
    name: zabbix-sender
    state: "{{ zabbix_sender | default('absent') }}"
  register: result
  retries: 3
  until: result is succeeded
  when:
    - zabbix_sender is defined

- name: install zabbix-proxy software
  package:
    name: "zabbix-proxy-{{ zabbix_proxy_type | default('mysql') }}"
    state: "{{ zabbix_proxy | default('absent') }}"
  register: result
  retries: 3
  until: result is succeeded
  when:
    - zabbix_proxy is defined

- name: start and enable zabbix-proxy
  service:
    name: "{{ zabbix_proxy_service }}"
    state: started
    enabled: yes
  when:
    - ansible_virtualization_type != "docker"
    - zabbix_proxy == "present"

- name: install zabbix web software
  package:
    name: "zabbix-web-{{ zabbix_web_type | default('mysql') }}"
    state: "{{ zabbix_web | default('absent') }}"
  register: result
  retries: 3
  until: result is succeeded
  when:
    - zabbix_web is defined

- name: configure zabbix web
  template:
    src: zabbix.conf.php.j2
    dest: /etc/zabbix/web/zabbix.conf.php
  when:
    - zabbix_web == "present"
  notify:
    - restart httpd
